name: CI/CD Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # 重要な組み合わせのみを厳選してテスト
        include:
          # Ubuntu - 最も一般的な環境でのフルテスト
          - os: ubuntu-latest
            python-version: '3.9'
            qt-framework: pyqt5
          - os: ubuntu-latest
            python-version: '3.9' 
            qt-framework: pyqt6
          - os: ubuntu-latest
            python-version: '3.10'
            qt-framework: pyside6
          - os: ubuntu-latest
            python-version: '3.11'
            qt-framework: pyqt6
          - os: ubuntu-latest
            python-version: '3.12'
            qt-framework: pyqt6
          
          # Windows - 重要な組み合わせのみ
          - os: windows-latest
            python-version: '3.10'
            qt-framework: pyqt6
          - os: windows-latest
            python-version: '3.11'
            qt-framework: pyside6
            
          # macOS - 重要な組み合わせのみ
          - os: macos-latest
            python-version: '3.10'
            qt-framework: pyqt6
          - os: macos-latest
            python-version: '3.11'
            qt-framework: pyside6

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 libxcb-cursor0
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3  # Wait for Xvfb to start
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        
        # Install Qt framework
        if [ "${{ matrix.qt-framework }}" == "pyqt5" ]; then
          pip install PyQt5>=5.15.0
        elif [ "${{ matrix.qt-framework }}" == "pyqt6" ]; then
          pip install PyQt6>=6.2.0
        elif [ "${{ matrix.qt-framework }}" == "pyside6" ]; then
          pip install PySide6>=6.0.0
        fi
        
        # Install package
        pip install -e .
      shell: bash
    
    - name: Run comprehensive tests
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: ${{ runner.os == 'macOS' && 'offscreen' || runner.os == 'Windows' && 'offscreen' || 'xcb' }}
        QT_DEBUG_PLUGINS: 0
        XDG_RUNTIME_DIR: /tmp/runtime-runner
        PYTHONIOENCODING: utf-8
      run: |
        mkdir -p /tmp/runtime-runner
        bash test_release.sh
      shell: bash
    
    - name: Test library functionality
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: ${{ runner.os == 'macOS' && 'offscreen' || runner.os == 'Windows' && 'offscreen' || 'xcb' }}
        QT_DEBUG_PLUGINS: 0
        XDG_RUNTIME_DIR: /tmp/runtime-runner
        PYTHONIOENCODING: utf-8
      run: |
        # Test library import and basic functionality
        python -c "
        import qt_theme_manager
        print(f'Qt-Theme-Manager v{qt_theme_manager.__version__} loaded successfully')
        from qt_theme_manager import ThemeController, detect_qt_framework
        print('Core components imported successfully')
        "
      shell: bash
    
    - name: Test CLI commands
      env:
        PYTHONIOENCODING: utf-8
      run: |
        python -m qt_theme_manager.cli.main list
        python -m qt_theme_manager.cli.main current
        python -m qt_theme_manager.cli.main set dark
        python -m qt_theme_manager.cli.main export dark test_dark.qss
      shell: bash

  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check build
      run: |
        twine check dist/*
    
    - name: Test installation from built package
      run: |
        pip install dist/*.whl
        python -c "import qt_theme_manager; print(f'Version: {qt_theme_manager.__version__}')"
