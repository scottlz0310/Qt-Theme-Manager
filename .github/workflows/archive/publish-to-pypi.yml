name: Publish to PyPI

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'     # 正確に v0.2.4 形式のみ

jobs:
  debug-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Debug trigger information
        run: |
          echo "=== WORKFLOW TRIGGER DEBUG ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref name: ${{ github.ref_name }}"
          echo "Ref type: ${{ github.ref_type }}"
          echo "Tag: ${{ github.event.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run number: ${{ github.run_number }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Job: ${{ github.job }}"
          echo "Action: ${{ github.action }}"
          echo "Event path: ${{ github.event_path }}"
          echo "Workspace: ${{ github.workspace }}"
          echo "SHA: ${{ github.sha }}"
          echo "=== TRIGGER CONDITIONS CHECK ==="
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Tag format matches regex pattern"
          else
            echo "❌ Tag format does NOT match regex pattern"
          fi
          echo "Current tag: ${{ github.ref_name }}"
          echo "=== EVENT PAYLOAD ==="
          cat "${{ github.event_path }}" || echo "No event payload available"
          echo "=== END DEBUG ==="
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        qt-framework: [pyqt5, pyqt6, pyside6]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up display (for GUI tests)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y xvfb x11-utils libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 libegl1-mesa-dev libxcb-cursor0
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3  # Wait for Xvfb to start

      - name: Install dependencies
        run: |
          set -e
          echo "=== STEP: Installing dependencies ==="
          python -m pip install --upgrade pip
          pip list
          pip install build pytest
          pip list

          echo "=== STEP: Installing Qt framework: ${{ matrix.qt-framework }} ==="
          if [ "${{ matrix.qt-framework }}" = "pyqt5" ]; then
            python -m pip install pyqt5==5.15.* pyqt5-tools
            pip list
          elif [ "${{ matrix.qt-framework }}" = "pyqt6" ]; then
            python -m pip install pyqt6
            pip list
          elif [ "${{ matrix.qt-framework }}" = "pyside6" ]; then
            python -m pip install pyside6
            pip list
          fi

          echo "=== STEP: Installing package in development mode ==="
          pip install -e .
          pip list

      - name: Run tests
        env:
          DISPLAY: :99
          QT_QPA_PLATFORM: xcb
          QT_DEBUG_PLUGINS: 0
          XDG_RUNTIME_DIR: /tmp/runtime-runner
          PYTHONIOENCODING: utf-8
        run: |
          set -e
          mkdir -p /tmp/runtime-runner
          chmod 700 /tmp/runtime-runner

          echo "=== STEP: Testing Qt framework ==="
          if [ -f "scripts/test_qt_framework.py" ]; then
            python scripts/test_qt_framework.py ${{ matrix.qt-framework }} --verbose
          else
            echo "Qt framework test script not found, skipping..."
          fi
          
          echo "=== STEP: Running main test suite ==="
          bash test_release.sh

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          set -e
          python -m pip install --upgrade pip
          pip list
          pip install build twine
          pip list

      - name: Build package
        run: |
          set -e
          python -m build
          ls -la dist/

      - name: Check build
        run: |
          set -e
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # OIDC for PyPI trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          print-hash: true
