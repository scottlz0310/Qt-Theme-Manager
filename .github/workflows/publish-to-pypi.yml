name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # v0.2.1, v1.0.0などのタグにマッチ

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        qt-framework: [pyqt5, pyqt6, pyside6]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up display (for GUI tests)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Install dependencies
        run: |
          echo "=== STEP: Installing dependencies ==="
          python -m pip install --upgrade pip
          pip install build pytest

          echo "=== STEP: Installing Qt framework: ${{ matrix.qt-framework }} ==="
          if [ "${{ matrix.qt-framework }}" = "pyqt5" ]; then
            python -m pip install pyqt5==5.15.* pyqt5-tools
            python -c "
import sys
try:
    import PyQt5.QtCore
    print(f'PyQt5.QtCore version: {PyQt5.QtCore.PYQT_VERSION_STR}')
    print(f'Qt version: {PyQt5.QtCore.QT_VERSION_STR}')
except Exception as e:
    print(f'PyQt5.QtCore import error: {e}')
    sys.exit(1)
try:
    import PyQt5.QtWidgets
    print('PyQt5.QtWidgets imported successfully')
except Exception as e:
    print(f'PyQt5.QtWidgets import error: {e}')
    sys.exit(1)
"
          elif [ "${{ matrix.qt-framework }}" = "pyqt6" ]; then
            python -m pip install pyqt6
          elif [ "${{ matrix.qt-framework }}" = "pyside6" ]; then
            python -m pip install pyside6
          fi

          pip install -e .

      - name: Run tests
        env:
          DISPLAY: :99
          QT_QPA_PLATFORM: xcb
          QT_DEBUG_PLUGINS: 0
          XDG_RUNTIME_DIR: /tmp/runtime-runner
          PYTHONIOENCODING: utf-8
        run: |
          mkdir -p /tmp/runtime-runner
          chmod 700 /tmp/runtime-runner

          python -c "
import sys, os
qt_framework = '${{ matrix.qt-framework }}'
print(f'Testing framework: {qt_framework}')
try:
    if qt_framework == 'pyqt5':
        from PyQt5.QtCore import qVersion
        from PyQt5.QtWidgets import QApplication
    elif qt_framework == 'pyqt6':
        from PyQt6.QtCore import qVersion
        from PyQt6.QtWidgets import QApplication
    elif qt_framework == 'pyside6':
        from PySide6.QtCore import qVersion
        from PySide6.QtWidgets import QApplication
    print(f'{qt_framework} version: {qVersion()}')
    app = QApplication([])
    print('QApplication creation: SUCCESS')
    app.quit()
    print('QApplication cleanup: SUCCESS')
except Exception as e:
    print(f'Qt framework error: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
"
          python test_theme_manager.py

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build
          ls -la dist/

      - name: Check build
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # OIDC for PyPI trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          print-hash: true
