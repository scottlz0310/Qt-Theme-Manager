name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.2)'
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install Qt dependencies (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 libegl1 libdbus-1-3 libxcb-cursor0

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG="v${VERSION}"
        else
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Validate version format
      run: |
        if ! echo "${{ steps.version.outputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "Invalid version format: ${{ steps.version.outputs.version }}"
          exit 1
        fi

    - name: Update version in pyproject.toml
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        sed -i "s/^version = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/version = \"$VERSION\"/" pyproject.toml

        # 変更を確認
        UPDATED_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Updated pyproject.toml version to: $UPDATED_VERSION"

        if [ "$UPDATED_VERSION" != "$VERSION" ]; then
          echo "Error: Failed to update pyproject.toml version"
          exit 1
        fi

    - name: Commit version update
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git diff --staged --quiet || git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
        git push

    - name: Verify version consistency (tag push)
      if: github.event_name == 'push'
      run: |
        PYPROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        TAG_VERSION="${{ steps.version.outputs.version }}"

        if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
          echo "Error: Version mismatch!"
          echo "  Tag version: $TAG_VERSION"
          echo "  pyproject.toml version: $PYPROJECT_VERSION"
          echo "Please update pyproject.toml to match the tag version before pushing the tag."
          exit 1
        fi
        echo "Version consistency verified: $TAG_VERSION"

    - name: Run tests
      run: |
        uv sync --group dev
        uv sync --group pyside6
        uv run ruff check qt_theme_manager/
        uv run mypy qt_theme_manager/
        uv run pytest tests/

  build:
    needs: validate
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Build package
      run: |
        uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v5
      with:
        name: dist
        path: dist/

  update-docs:
    needs: [validate, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Update CHANGELOG
      run: |
        DATE=$(date +"%Y-%m-%d")
        VERSION="${{ needs.validate.outputs.version }}"

        # CHANGELOGの更新
        if [ -f CHANGELOG.md ]; then
          sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [$VERSION] - $DATE/" CHANGELOG.md
        fi

    - name: Update version badges
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        # README.mdのバージョンバッジを更新
        if [ -f README.md ]; then
          sed -i "s/qt-theme-manager-[0-9]\+\.[0-9]\+\.[0-9]\+/qt-theme-manager-$VERSION/g" README.md
        fi

        # README_ja.mdのバージョンバッジを更新
        if [ -f README_ja.md ]; then
          sed -i "s/qt-theme-manager-[0-9]\+\.[0-9]\+\.[0-9]\+/qt-theme-manager-$VERSION/g" README_ja.md
        fi

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --staged --quiet || git commit -m "docs: update for release ${{ needs.validate.outputs.version }}"
        git push

  release:
    needs: [validate, build, update-docs]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v6
      with:
        name: dist
        path: dist/

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        # CHANGELOGから該当バージョンの変更内容を抽出
        if [ -f CHANGELOG.md ]; then
          NOTES=$(awk "/## \[$VERSION\]/,/## \[/{if(/## \[/ && !/## \[$VERSION\]/) exit; if(!/## \[$VERSION\]/) print}" CHANGELOG.md)
        else
          NOTES="Release $VERSION"
        fi

        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate.outputs.tag }}
        name: Release ${{ needs.validate.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        files: dist/*
        draft: false
        prerelease: false

  publish:
    needs: [validate, build, release]
    runs-on: ubuntu-latest
    environment: pypi

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v6
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
