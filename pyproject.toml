[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "qt-theme-manager"
version = "1.0.1"
description = "A pure theme management library for PyQt5/PyQt6/PySide6 applications with automatic Qt framework detection"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    {name = "scottlz0310", email = "scott.lz0310@gmail.com"}
]
maintainers = [
    {name = "scottlz0310", email = "scott.lz0310@gmail.com"}
]
keywords = [
    "theme", 
    "qt", 
    "styling", 
    "pyside", 
    "pyqt", 
    "library", 
    "ui", 
    "desktop",
    "theme-management",
    "stylesheet"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Desktop Environment",
    "Environment :: X11 Applications :: Qt",
]
requires-python = ">=3.9"
dependencies = [
    # Qt自動検出システム - 実行時に PySide6 → PyQt6 → PyQt5 の順で自動選択
    # 依存関係を最小化し、ユーザーが任意のQtフレームワークを選択可能
]

[dependency-groups]
# 開発依存関係
dev = [
    "pytest>=7.0",
    "pytest-qt>=4.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "types-setuptools",
]

# セキュリティツール
security = [
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pip-licenses>=4.0.0",
]

# Qt フレームワーク選択肢（推奨順）
pyside6 = ["PySide6>=6.0.0"]
pyqt6 = ["PyQt6>=6.2.0"]
pyqt5 = ["PyQt5>=5.15.0"]

# 全Qtフレームワーク（統合テスト用）
all-qt = [
    "PySide6>=6.0.0",
    "PyQt6>=6.2.0", 
    "PyQt5>=5.15.0",
]

# 完全な開発環境
full-dev = [
    {include-group = "dev"},
    {include-group = "security"},
    {include-group = "all-qt"},
    "tox>=4.0",
    "pre-commit>=3.0",
]

[project.urls]
Homepage = "https://github.com/scottlz0310/Qt-Theme-Manager"
Documentation = "https://github.com/scottlz0310/Qt-Theme-Manager/blob/main/README.md"
Repository = "https://github.com/scottlz0310/Qt-Theme-Manager"
"Bug Tracker" = "https://github.com/scottlz0310/Qt-Theme-Manager/issues"

[project.scripts]
qt-theme-manager = "qt_theme_manager.cli.main:main"

# === 開発ツール設定 ===

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
strict = true
exclude = [
    "migrate/",
    "temp/",
    "sandbox/",
    "build/",
    "dist/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=qt_theme_manager",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=95",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101"]  # assert_used

[tool.coverage.run]
source = ["qt_theme_manager"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]